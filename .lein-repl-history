(with-progress-reporting (bench (Thread/sleep 1000) :verbose))
(bench (Thread/sleep 1000)
)
(use 'criterium)
(use 'criterium.core)
(with-progress-reporting (bench (Thread/sleep 1000) :verbose))
(use 'server.core)
(ns server.core (use 'server.core))
(ns server.core (:use 'server.core))
(. System exit 0)
(use 'clj-amazon.core)
exit
(use 'clj-amazon.core)
(use 'clj-amazon.product-advertising)
(def ACCESS-KEY "AKIAJ3FTJEZNETDGEVNA" )
(def SECRET-KEY "04CISiNrmOP6kH+0PmI6XVJ7tsBtO46wF2prNBhy" )
(def ASSOCIATE-ID "YOUR-ASSOCIATE-ID-HERE")
(def ASSOCIATE-ID "b944ad06744d953f704c6af472a274eee584813ae2b8a768b68277045da7178c")
(def gibson-opus-search (with-signer (ACCESS-KEY, SECRET-KEY) (item-search :search-index "Books", :keywords "Neuromancer", :associate-tag ASSOCIATE-ID, :condition "New")))
(println gibson-opus-search)
(println ACCESS-KEY)
(println ASSOCIATE-KEY)
(println ASSOCIATE-ID)
(println SECRET-KEY)
(conj [1] [2 3])
(into [1] [2 3])
(w)
(def w "happy")
(w)
w
(+ 1 2)
(+ 1 2 3)
(1 + 2 + 3)
(+ 1 2 3 4 5 )
(* 20 72)
(map (+ 1) [1 2 3 4 5])
(map #(+ 1 %) [1 2 3 4 5])
(map inc [1 2 3 4 5])
(inc 4)
(inc (inc 4))
(map inc [1 2 3])
(reduce + [1 2 3])
(reduce inc [1 2 3])
(:type {:type :search})
(= :search (:type {:type :search}))
(type "hej")
(type [])
(read-string {:content #<[object HTMLInputElement]>, :type :search}
)
(read-string "{:content #<[object HTMLInputElement]>, :type :search}")
(defn has-type
  [message type]
  (-> type keyword (:type message)))
(has-type {:type :heartbeat} :heartbeat)
(:type {:type heartbeat})
(:type {:type :heartbeat})
(-> type keyword)
(-> "type" keyword)
(defn has-type
  [message type]
  (-> "type" keyword (:type message)))
(has-type {:type :heartbeat} :heartbeat)
(-> heartbeat keyword (:type {:type :heartbeat}))
(-> "heartbeat" keyword (:type {:type :heartbeat}))
(:type {:type :heartbeat})
(defn has-type
  [message type]
  (= (keyword type) (:type message)))
(has-type {:type :heartbeat} :heartbeat)
(has-type {:type :heartbeat} :heartbea)
(has-type {} :heartbeat)
exit
(-main)
